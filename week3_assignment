import requests_with_caching
import json

def get_movies_from_tastedive(name):
    baseurl = "https://tastedive.com/api/similar" 
    query_params = {}
    query_params["q"] = name
    query_params["type"] = "movies"
    query_params["limit"] = 5
    this_page_cache = requests_with_caching.get(baseurl, params = query_params)
    return json.loads(this_page_cache.text)
    
def extract_movie_titles(movie_dict):
    return [movie['Name'] for movie in movie_dict['Similar']['Results']]
    
def get_related_titles(movie_lst):
    temp = list()
    final = list()
    for movie in movie_lst:
        temp.append(extract_movie_titles(get_movies_from_tastedive(movie)))
    for lst in temp:
        for movie in lst:
            if movie not in final:
                final.append(movie)
    return final
    
def get_movie_data(title):
    baseurl = "http://www.omdbapi.com/"
    query_param ={}
    query_param['t'] = title
    query_param['r'] = "json"
    this_page_cache = requests_with_caching.get(baseurl, params=query_param)
    return json.loads(this_page_cache.text)
    
def get_movie_rating(title):
    rating = 0
    if 'Rotten Tomatoes' in title['Ratings'][1].values():
        rating = int(title['Ratings'][1]['Value'][:-1])
    return (rating)


def get_sorted_recommendations(movie_lst):
    alternatives = get_related_titles(movie_lst)
    movie_dict ={}
    for movie in alternatives:
        movie_dict[movie] = 0
    key_list = movie_dict.keys()
    for key in key_list:
        movie_dict[key] = get_movie_rating(get_movie_data(key))      
    return ([i[0] for i in sorted(movie_dict.items(), key=lambda item: (item[1], item[0]), reverse=True)])

    
    
